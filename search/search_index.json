{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Learning objectives : By the end of this tutorial, you will be able to build a documentation site using MkDocs. This tutorial is for Technical Writers who are newly introduced to Docs-as-Code and need a guide to building their first documentation website. What is MkDocs? Technical writers can make websites with MkDocs, a simple and user-friendly documentation tool. It uses plain text written in Markdown and turns it into visually appealing documentation websites. MkDocs is also extensible, with many themes and plugins available. It's also easy to set up and use, making it ideal for technical writers who want to create high-quality websites quickly. Benefits of Choosing MkDocs MkDocs has the following benefits: Simple to use : MkDocs uses Markdown, a simple-to-learn syntax language; you don't need any coding experience. Focus on content : With MkDocs, setting up your project is easy, and it handles other technical aspects, allowing you to focus on creating your best writing piece. Flexibility : It has several themes, with the option to customize your website to fit your brand style. It makes working with your team members easy, which is essential. Before You Begin You must have VS Code installed. You must have Python and pip installed on your local device.","title":"Home"},{"location":"#overview","text":"Learning objectives : By the end of this tutorial, you will be able to build a documentation site using MkDocs. This tutorial is for Technical Writers who are newly introduced to Docs-as-Code and need a guide to building their first documentation website.","title":"Overview"},{"location":"#what-is-mkdocs","text":"Technical writers can make websites with MkDocs, a simple and user-friendly documentation tool. It uses plain text written in Markdown and turns it into visually appealing documentation websites. MkDocs is also extensible, with many themes and plugins available. It's also easy to set up and use, making it ideal for technical writers who want to create high-quality websites quickly.","title":"What is MkDocs?"},{"location":"#benefits-of-choosing-mkdocs","text":"MkDocs has the following benefits: Simple to use : MkDocs uses Markdown, a simple-to-learn syntax language; you don't need any coding experience. Focus on content : With MkDocs, setting up your project is easy, and it handles other technical aspects, allowing you to focus on creating your best writing piece. Flexibility : It has several themes, with the option to customize your website to fit your brand style. It makes working with your team members easy, which is essential.","title":"Benefits of Choosing MkDocs"},{"location":"#before-you-begin","text":"You must have VS Code installed. You must have Python and pip installed on your local device.","title":"Before You Begin"},{"location":"deploy/","text":"Building and Deploying Your Site This process makes your MkDocs site live and accessible to people. To get started: Create a GitHub account on the website . Create a new repository on GitHub. For more information, see Create a Repo . Push your site to this new repository by typing these commands after each other in your terminal. python git init git add . //Ensure to add a space after \u2018add\u2019 git commit -m \"First commit\" git remote add origin https://github.com/DrVickie8/MkDocsTest.git git push -set-upstream origin master Type in your terminal and wait for a few seconds python mkdocs gh-deploy Create a new file called .gitignore , add the newly created folder site as seen below and save changes. Your first-project is the name of the folder the site folder is in. Repeat the commands below. python git init git add .gitignore //Ensure to add a space after 'add' git commit -m \"Fix: Adding .gitignore file\" git push Go to your GitHub repository and refresh the page. Scroll down to the \u2018Environment\u2019 section and click \u2018github-pages' Click \u2018View deployment\u2019, and your MkDocs site is now available. Here is a link to a GitHub repository and documentation site used to deploy a MkDocs site created following the instructions in this guide.","title":"Building and Deploying Your Site"},{"location":"deploy/#building-and-deploying-your-site","text":"This process makes your MkDocs site live and accessible to people. To get started: Create a GitHub account on the website . Create a new repository on GitHub. For more information, see Create a Repo . Push your site to this new repository by typing these commands after each other in your terminal. python git init git add . //Ensure to add a space after \u2018add\u2019 git commit -m \"First commit\" git remote add origin https://github.com/DrVickie8/MkDocsTest.git git push -set-upstream origin master Type in your terminal and wait for a few seconds python mkdocs gh-deploy Create a new file called .gitignore , add the newly created folder site as seen below and save changes. Your first-project is the name of the folder the site folder is in. Repeat the commands below. python git init git add .gitignore //Ensure to add a space after 'add' git commit -m \"Fix: Adding .gitignore file\" git push Go to your GitHub repository and refresh the page. Scroll down to the \u2018Environment\u2019 section and click \u2018github-pages' Click \u2018View deployment\u2019, and your MkDocs site is now available. Here is a link to a GitHub repository and documentation site used to deploy a MkDocs site created following the instructions in this guide.","title":"Building and Deploying Your Site"},{"location":"resources/","text":"Next Steps Official MkDocs documentation Customizing Read the Docs Markdown Syntax External themes GitHub Skills GitHub and Git Tutorial for Beginners","title":"Next Steps"},{"location":"resources/#next-steps","text":"Official MkDocs documentation Customizing Read the Docs Markdown Syntax External themes GitHub Skills GitHub and Git Tutorial for Beginners","title":"Next Steps"},{"location":"structure/","text":"Understanding the MkDocs project Structure When you type the command mkdocs new my-project , it creates some files automatically. Here is a breakdown of those files and what they are for: docs/ is a folder containing all your project's content. It has markdown (.md) files; It is mandatory to write in Markdown. Markdown is a markup language that is easy to learn and represents individual pages on your site. This folder can have folders created in it. mkdocs.yml is a vital file. MkDocs receives instructions from here. You can change the site name, add pages, add themes, and much more. Every significant change you make to your project must be in this file.","title":"Understanding the Project Structure"},{"location":"structure/#understanding-the-mkdocs-project-structure","text":"When you type the command mkdocs new my-project , it creates some files automatically. Here is a breakdown of those files and what they are for: docs/ is a folder containing all your project's content. It has markdown (.md) files; It is mandatory to write in Markdown. Markdown is a markup language that is easy to learn and represents individual pages on your site. This folder can have folders created in it. mkdocs.yml is a vital file. MkDocs receives instructions from here. You can change the site name, add pages, add themes, and much more. Every significant change you make to your project must be in this file.","title":"Understanding the MkDocs project Structure"},{"location":"summary/","text":"CONCLUSION Throughout this tutorial, you gained the necessary skills to set up a MkDocs project and comprehend its structure. Additionally, you learned how to add and organize pages, customize your website with themes, and deploy it on a hosting platform. Utilizing this newfound knowledge, you have successfully built your documentation site. It is recommended that you continue to explore other documentation sites to improve your understanding. Staying up-to-date with the latest tips and techniques is crucial to enhance your writing skills. As such, I highly encourage you to connect with me on LinkedIn and Twitter .","title":"Conclusion"},{"location":"summary/#conclusion","text":"Throughout this tutorial, you gained the necessary skills to set up a MkDocs project and comprehend its structure. Additionally, you learned how to add and organize pages, customize your website with themes, and deploy it on a hosting platform. Utilizing this newfound knowledge, you have successfully built your documentation site. It is recommended that you continue to explore other documentation sites to improve your understanding. Staying up-to-date with the latest tips and techniques is crucial to enhance your writing skills. As such, I highly encourage you to connect with me on LinkedIn and Twitter .","title":"CONCLUSION"},{"location":"themes/","text":"How to use MkDocs themes MkDocs offers a range of themes for customizing your site. With these themes, you can change the look and styling of your site. They are Built-in themes include the default MkDocs, which does not require installation, and Read the Docs. Follow the steps to use the Read the Docs theme: Open the mkdocs.yml file, type in theme , and set the value to readthedocs . python theme: readthedocs Save the changes in the mkdocs.yml file. External themes offer additional customization options and styles. Follow these steps to get started: Find an external theme on GitHub and install it according to the instructions in the documentation. In your mkdocs.yml file, type in python theme:[themeName] Explore the customization options of your preferred theme.","title":"Using Themes"},{"location":"themes/#how-to-use-mkdocs-themes","text":"MkDocs offers a range of themes for customizing your site. With these themes, you can change the look and styling of your site. They are Built-in themes include the default MkDocs, which does not require installation, and Read the Docs. Follow the steps to use the Read the Docs theme: Open the mkdocs.yml file, type in theme , and set the value to readthedocs . python theme: readthedocs Save the changes in the mkdocs.yml file. External themes offer additional customization options and styles. Follow these steps to get started: Find an external theme on GitHub and install it according to the instructions in the documentation. In your mkdocs.yml file, type in python theme:[themeName] Explore the customization options of your preferred theme.","title":"How to use MkDocs themes"},{"location":"writing/","text":"Writing Using MKDocs is easy\u2014you don't need coding experience. All your content is in the Docs folder. Getting Started To get started, type this command in your terminal. python cd my-project // Use the name for your project For a preview of your site, start the server by running the command python mkdocs serve Click on \u2018Ctrl\u2019 + http://127.0.0.1:8000/ to view the default web page. Making Changes To make some changes to your site, follow these steps: Heading Change the site name in the mkdocs.yml file and save your changes. site_name: First Doc Site Adding pages Navigate to the docs/ folder and create new files, for example, firstpage.md and secondpage.md . See How to Create Files and Folders in VS Code for more information. Type in your content using Markdown. For more information, see markdown syntax . Save your work. Go to mkdocs.yml , add the newly created files in this format, and save your changes. python site_name: Getting Started with MkDocs nav: - Home: index.md - About: firstPage.md - FAQ: secondpage.md Nesting This is grouping pages under a parent page; this makes your site organized and easy to navigate. Create a new folder in the docs/ folder; this will be the parent page. Create new markdown (.md) files in the new folder and add the content or text on these pages. Open the mkdocs.yml file under the nav section and add the parent page and its sub-pages in the format below. > Remember to indent your YAML file","title":"Writing"},{"location":"writing/#writing","text":"Using MKDocs is easy\u2014you don't need coding experience. All your content is in the Docs folder.","title":"Writing"},{"location":"writing/#getting-started","text":"To get started, type this command in your terminal. python cd my-project // Use the name for your project For a preview of your site, start the server by running the command python mkdocs serve Click on \u2018Ctrl\u2019 + http://127.0.0.1:8000/ to view the default web page.","title":"Getting Started"},{"location":"writing/#making-changes","text":"To make some changes to your site, follow these steps: Heading Change the site name in the mkdocs.yml file and save your changes. site_name: First Doc Site Adding pages Navigate to the docs/ folder and create new files, for example, firstpage.md and secondpage.md . See How to Create Files and Folders in VS Code for more information. Type in your content using Markdown. For more information, see markdown syntax . Save your work. Go to mkdocs.yml , add the newly created files in this format, and save your changes. python site_name: Getting Started with MkDocs nav: - Home: index.md - About: firstPage.md - FAQ: secondpage.md Nesting This is grouping pages under a parent page; this makes your site organized and easy to navigate. Create a new folder in the docs/ folder; this will be the parent page. Create new markdown (.md) files in the new folder and add the content or text on these pages. Open the mkdocs.yml file under the nav section and add the parent page and its sub-pages in the format below. > Remember to indent your YAML file","title":"Making Changes"},{"location":"Using-mkdocs/setup/","text":"Setup Now that you have Python and pip installed, the next step is to install MkDocs. Follow the steps below. Type this command in your terminal or command prompt: python pip install mkdocs Confirm the complete MkDocs installation by typing this command: python mkdocs --version Create a new folder for your project on your desktop. Right-click on the newly created folder and choose 'Show more options'. Click 'Open with Code' to open your VSCode. Click on the terminal and select 'New Terminal'. Create a new MkDocs project by typing in the command below in the opened terminal. python mkdocs new my-project // \u2018my-project\u2019 can be any name Navigate to your new project folder by typing the following command: python cd my-project","title":"Setup"},{"location":"Using-mkdocs/setup/#setup","text":"Now that you have Python and pip installed, the next step is to install MkDocs. Follow the steps below. Type this command in your terminal or command prompt: python pip install mkdocs Confirm the complete MkDocs installation by typing this command: python mkdocs --version Create a new folder for your project on your desktop. Right-click on the newly created folder and choose 'Show more options'. Click 'Open with Code' to open your VSCode. Click on the terminal and select 'New Terminal'. Create a new MkDocs project by typing in the command below in the opened terminal. python mkdocs new my-project // \u2018my-project\u2019 can be any name Navigate to your new project folder by typing the following command: python cd my-project","title":"Setup"},{"location":"Using-mkdocs/usingmkdocs/","text":"How to use MkDocs Installation MkDocs requires Python, a programming language, but do not fear; you do not need to learn Python to build your first documentation site. If you already have Python installed, confirm by writing the following command in your terminal: python python - -version Then pip --version If something like this occurs, then you are good to go. The number may vary depending on the latest version the Python developers team releases. python PS C:\\Users\\Administrator> python --version Python 3.11.4 PS C:\\Users\\Administrator> pip --version pip 23.1.2 from C:\\Python311\\Lib\\site-packages\\pip (python 3.11)","title":"How to use MkDocs"},{"location":"Using-mkdocs/usingmkdocs/#how-to-use-mkdocs","text":"","title":"How to use MkDocs"},{"location":"Using-mkdocs/usingmkdocs/#installation","text":"MkDocs requires Python, a programming language, but do not fear; you do not need to learn Python to build your first documentation site. If you already have Python installed, confirm by writing the following command in your terminal: python python - -version Then pip --version If something like this occurs, then you are good to go. The number may vary depending on the latest version the Python developers team releases. python PS C:\\Users\\Administrator> python --version Python 3.11.4 PS C:\\Users\\Administrator> pip --version pip 23.1.2 from C:\\Python311\\Lib\\site-packages\\pip (python 3.11)","title":"Installation"}]}